
/* Class = "NSComboBox"; ibShadowedToolTip = "<key>Inject</key>\n<string>Detect</string>\nProperty injection for the sound chip. Only works when the DSDT defines Device (HDEF). If you renamed it, you can also inject the other properties differently. Do not use this parameter with VoodooHDA. Possible options are:\n\nNo - Injection is turned off\nDetect - Automatic detection of the sound chip and injection of its ID as layout ID. Actually this is nonsense but still very popular. Does not do any harm and affects the display of sound properties in System Profiler.\n883 - Decimal number representing. Refers to Realtek ALC883 in this case.\n0x373 - Same as above in hexadecimal.\nThese numbers are incorrect, you will need to find the correct value and possibly replace the layout file bundled with AppleHDA to get the chip working."; ObjectID = "0Ex-U9-H5a"; */
"0Ex-U9-H5a.ibShadowedToolTip" = "<key>Inject</key>\n<string>Detect</string>\nProperty injection for the sound chip. Only works when the DSDT defines Device (HDEF). If you renamed it, you can also inject the other properties differently. Do not use this parameter with VoodooHDA. Possible options are:\n\nNo - Injection is turned off\nDetect - Automatic detection of the sound chip and injection of its ID as layout ID. Actually this is nonsense but still very popular. Does not do any harm and affects the display of sound properties in System Profiler.\n883 - Decimal number representing. Refers to Realtek ALC883 in this case.\n0x373 - Same as above in hexadecimal.\nThese numbers are incorrect, you will need to find the correct value and possibly replace the layout file bundled with AppleHDA to get the chip working.";

/* Class = "NSTextFieldCell"; title = "Inject"; ObjectID = "1B4-NT-MXV"; */
"1B4-NT-MXV.title" = "Inject";

/* Class = "NSButton"; ibShadowedToolTip = "<key>FixOwnership</key>\n<true/>\nIt is possible to leave USB injection enabled and only turn off the ownership fix.\n\nThis fix is not relevant for UEFI booting."; ObjectID = "2I2-ep-g7I"; */
"2I2-ep-g7I.ibShadowedToolTip" = "<key>FixOwnership</key>\n<true/>\nIt is possible to leave USB injection enabled and only turn off the ownership fix.\n\nThis fix is not relevant for UEFI booting.";

/* Class = "NSTabViewItem"; label = "Properties"; ObjectID = "3qf-0a-EIY"; */
"3qf-0a-EIY.label" = "Properties";

/* Class = "NSButton"; ibShadowedToolTip = "<key>ResetHDA</key>\n<true/>\nAudio controller initialization. Some users have non-working sound after cold boot but works after restart or wake (even on Windows!). This is a workaround that works at early boot, so it will affect Windows as well."; ObjectID = "4ga-hk-hZY"; */
"4ga-hk-hZY.ibShadowedToolTip" = "<key>ResetHDA</key>\n<true/>\nAudio controller initialization. Some users have non-working sound after cold boot but works after restart or wake (even on Windows!). This is a workaround that works at early boot, so it will affect Windows as well.";

/* Class = "NSTableColumn"; headerCell.title = "Key*"; ObjectID = "5Yq-DI-Ikq"; */
"5Yq-DI-Ikq.headerCell.title" = "Key*";

/* Class = "NSComboBoxCell"; 6wG-aR-1wy.ibShadowedObjectValues[1] = "No"; ObjectID = "6wG-aR-1wy"; */
"6wG-aR-1wy.ibShadowedObjectValues[1]" = "No";

/* Class = "NSComboBoxCell"; 6wG-aR-1wy.ibShadowedObjectValues[2] = "Detect"; ObjectID = "6wG-aR-1wy"; */
"6wG-aR-1wy.ibShadowedObjectValues[2]" = "Detect";

/* Class = "NSBox"; title = "Audio"; ObjectID = "7jP-8O-5Hn"; */
"7jP-8O-5Hn.title" = "Audio";

/* Class = "NSTextFieldCell"; placeholderString = "PciRoot(0x0)/Pci(0x1c,0x3)/Pci(0x0,0x0)"; ObjectID = "7ub-J8-a2r"; */
"7ub-J8-a2r.placeholderString" = "PciRoot(0x0)/Pci(0x1c,0x3)/Pci(0x0,0x0)";

/* Class = "NSTextFieldCell"; title = "PciRoot(0x0)/Pci(0x1c,0x3)/Pci(0x0,0x0)"; ObjectID = "7ub-J8-a2r"; */
"7ub-J8-a2r.title" = "PciRoot(0x0)/Pci(0x1c,0x3)/Pci(0x0,0x0)";

/* Class = "NSTextFieldCell"; title = "NVidia"; ObjectID = "8ip-p9-5tY"; */
"8ip-p9-5tY.title" = "NVidia";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "HEX in DATA type; 0 = \"NO\", 1 = \"YES\" in BOOLEAN type "; ObjectID = "8r1-Ie-cZD"; */
"8r1-Ie-cZD.ibShadowedIsNilPlaceholder" = "HEX in DATA type; 0 = \"NO\", 1 = \"YES\" in BOOLEAN type ";

/* Class = "NSButtonCell"; title = "UseIntelHDMI"; ObjectID = "9J8-8s-0O0"; */
"9J8-8s-0O0.title" = "UseIntelHDMI";

/* Class = "NSButtonCell"; title = "Inject"; ObjectID = "9Nj-te-UVe"; */
"9Nj-te-UVe.title" = "Inject";

/* Class = "NSButton"; ibShadowedToolTip = "Some tuning about C4/C6 States and SpeedStep"; ObjectID = "9QK-wm-bPF"; */
"9QK-wm-bPF.ibShadowedToolTip" = "Some tuning about C4/C6 States and SpeedStep";

/* Class = "NSComboBoxCell"; 9oF-ez-2XI.ibShadowedObjectValues[0] = "STRING"; ObjectID = "9oF-ez-2XI"; */
"9oF-ez-2XI.ibShadowedObjectValues[0]" = "STRING";

/* Class = "NSComboBoxCell"; 9oF-ez-2XI.ibShadowedObjectValues[1] = "NUMBER"; ObjectID = "9oF-ez-2XI"; */
"9oF-ez-2XI.ibShadowedObjectValues[1]" = "NUMBER";

/* Class = "NSComboBoxCell"; 9oF-ez-2XI.ibShadowedObjectValues[2] = "DATA"; ObjectID = "9oF-ez-2XI"; */
"9oF-ez-2XI.ibShadowedObjectValues[2]" = "DATA";

/* Class = "NSBox"; title = "USB"; ObjectID = "9yR-xy-e2p"; */
"9yR-xy-e2p.title" = "USB";

/* Class = "NSButtonCell"; title = "NameEH00"; ObjectID = "DfW-yh-0AF"; */
"DfW-yh-0AF.title" = "NameEH00";

/* Class = "NSTableColumn"; headerCell.title = "Value Type"; ObjectID = "E6H-GQ-ELu"; */
"E6H-GQ-ELu.headerCell.title" = "Value Type";

/* Class = "NSBox"; title = "Box"; ObjectID = "EB8-mt-NcG"; */
"EB8-mt-NcG.title" = "Box";

/* Class = "NSButton"; ibShadowedToolTip = "<key>Inject</key>\n<true/>\nInjects USB properties. You can turn it off for whatever reason, if you need. It is also disabled if the DSDT patch mask matches 0x1000 to prevent data duplication."; ObjectID = "Eq8-eZ-fBy"; */
"Eq8-eZ-fBy.ibShadowedToolTip" = "<key>Inject</key>\n<true/>\nInjects USB properties. You can turn it off for whatever reason, if you need. It is also disabled if the DSDT patch mask matches 0x1000 to prevent data duplication.";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "0xXXXX14E4"; ObjectID = "EuO-kz-UKB"; */
"EuO-kz-UKB.ibShadowedIsNilPlaceholder" = "0xXXXX14E4";

/* Class = "NSTableColumn"; headerCell.title = "Comment"; ObjectID = "F5e-zV-Jze"; */
"F5e-zV-Jze.headerCell.title" = "Comment";

/* Class = "NSTextFieldCell"; title = "Text Cell"; ObjectID = "FWa-mo-uK1"; */
"FWa-mo-uK1.title" = "Text Cell";

/* Class = "NSButton"; ibShadowedToolTip = "<key>NoDefaultProperties</key>\n<false/>\nThis key will affect DSDT fixes and force them to generate an empty _DSM. For example, if you enable FIX_DISPLAY Clover will create a device for the graphics card but with an empty _DSM. AddProperties and FakeID values will still be injected.\n\nThis works only for Display, Sound, LAN and WiFi."; ObjectID = "Fbo-vD-sOq"; */
"Fbo-vD-sOq.ibShadowedToolTip" = "<key>NoDefaultProperties</key>\n<false/>\nThis key will affect DSDT fixes and force them to generate an empty _DSM. For example, if you enable FIX_DISPLAY Clover will create a device for the graphics card but with an empty _DSM. AddProperties and FakeID values will still be injected.\n\nThis works only for Display, Sound, LAN and WiFi.";

/* Class = "NSTableColumn"; headerCell.title = "PciAddr*"; ObjectID = "GiF-gc-xsF"; */
"GiF-gc-xsF.headerCell.title" = "PciAddr*";

/* Class = "NSBox"; title = "Properties [HEX]"; ObjectID = "Gr2-u0-gLN"; */
"Gr2-u0-gLN.title" = "Properties [HEX]";

/* Class = "NSButton"; ibShadowedToolTip = "<key>HighCurrent</key>\n<true/>\nMore power needed to charge iPad from USB ports."; ObjectID = "H9i-56-9Ga"; */
"H9i-56-9Ga.ibShadowedToolTip" = "<key>HighCurrent</key>\n<true/>\nMore power needed to charge iPad from USB ports.";

/* Class = "NSView"; ibShadowedToolTip = "Now Devices->Properties can be written into config.plist in format as DarwinDumper do\n\nFor example\n<dict>\n<key>PciRoot(0x0)/Pci(0x1b,0x0)</key>\n\t<dict>\n\t\t<key>MaximumBootBeepVolume</key>\n\t\t<string>M</string>\n\t\t<key>PinConfigurations</key>\n\t\t<data>\n\t\tUEArAUABEJBCARCQIDCLARABoJAw4MsBYOBLAQ==\n\t\t</data>\n\t\t<key>layout-id</key>\n\t\t<data>\n\t\tEgAAAA==\n\t\t</data>\n\t\t<key>platformFamily</key>\n\t\t<data>\n\t\tAA==\n\t\t</data>\n\t</dict>\n\t<key>PciRoot(0x0)/Pci(0x1c,0x2)/Pci(0x0,0x0)/Pci(0x0,0x0)</key>\n\t<dict>\n\t\t<key>fwswappedbib</key>\n\t\t<data>\n\t\tAQAAAA==\n\t\t</data>\n\t</dict>\n\nThis way we can deprecate Arbitrary section."; ObjectID = "HE5-9l-mik"; */
"HE5-9l-mik.ibShadowedToolTip" = "Now Devices->Properties can be written into config.plist in format as DarwinDumper do\n\nFor example\n<dict>\n<key>PciRoot(0x0)/Pci(0x1b,0x0)</key>\n\t<dict>\n\t\t<key>MaximumBootBeepVolume</key>\n\t\t<string>M</string>\n\t\t<key>PinConfigurations</key>\n\t\t<data>\n\t\tUEArAUABEJBCARCQIDCLARABoJAw4MsBYOBLAQ==\n\t\t</data>\n\t\t<key>layout-id</key>\n\t\t<data>\n\t\tEgAAAA==\n\t\t</data>\n\t\t<key>platformFamily</key>\n\t\t<data>\n\t\tAA==\n\t\t</data>\n\t</dict>\n\t<key>PciRoot(0x0)/Pci(0x1c,0x2)/Pci(0x0,0x0)/Pci(0x0,0x0)</key>\n\t<dict>\n\t\t<key>fwswappedbib</key>\n\t\t<data>\n\t\tAQAAAA==\n\t\t</data>\n\t</dict>\n\nThis way we can deprecate Arbitrary section.";

/* Class = "NSTableColumn"; headerCell.title = "Devices*"; ObjectID = "HEH-g8-L3d"; */
"HEH-g8-L3d.headerCell.title" = "Devices*";

/* Class = "NSButton"; ibShadowedToolTip = "<key>Inject</key>\n<false/>\nEnabling it will cause the automatic injection to turn off and allow the injection of a custom string from Properties"; ObjectID = "HY8-2T-aia"; */
"HY8-2T-aia.ibShadowedToolTip" = "<key>Inject</key>\n<false/>\nEnabling it will cause the automatic injection to turn off and allow the injection of a custom string from Properties";

/* Class = "NSButton"; ibShadowedToolTip = "Try to force enable HPET if isn't."; ObjectID = "Hfo-IB-7nr"; */
"Hfo-IB-7nr.ibShadowedToolTip" = "Try to force enable HPET if isn't.";

/* Class = "NSButtonCell"; title = "HighCurrent"; ObjectID = "JU3-mD-ZWl"; */
"JU3-mD-ZWl.title" = "HighCurrent";

/* Class = "NSTableColumn"; headerCell.title = "Value Type"; ObjectID = "Jke-Be-RCo"; */
"Jke-Be-RCo.headerCell.title" = "Value Type";

/* Class = "NSButtonCell"; title = "Lpc Tune"; ObjectID = "Jlv-i8-A4y"; */
"Jlv-i8-A4y.title" = "Lpc Tune";

/* Class = "NSButtonCell"; title = "LANInjection"; ObjectID = "LBL-HV-p17"; */
"LBL-HV-p17.title" = "LANInjection";

/* Class = "NSButton"; ibShadowedToolTip = "Enable or disable HDMI injection, disabled by default."; ObjectID = "Mi8-oT-4ye"; */
"Mi8-oT-4ye.ibShadowedToolTip" = "Enable or disable HDMI injection, disabled by default.";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "0xXXXX10DE"; ObjectID = "NDY-K4-95p"; */
"NDY-K4-95p.ibShadowedIsNilPlaceholder" = "0xXXXX10DE";

/* Class = "NSComboBoxCell"; NaD-ja-1qu.ibShadowedObjectValues[0] = "0x0710"; ObjectID = "NaD-ja-1qu"; */
"NaD-ja-1qu.ibShadowedObjectValues[0]" = "0x0710";

/* Class = "NSComboBoxCell"; NaD-ja-1qu.ibShadowedObjectValues[1] = "0x056C"; ObjectID = "NaD-ja-1qu"; */
"NaD-ja-1qu.ibShadowedObjectValues[1]" = "0x056C";

/* Class = "NSComboBoxCell"; NaD-ja-1qu.ibShadowedObjectValues[2] = "0x07A1"; ObjectID = "NaD-ja-1qu"; */
"NaD-ja-1qu.ibShadowedObjectValues[2]" = "0x07A1";

/* Class = "NSComboBoxCell"; NaD-ja-1qu.ibShadowedObjectValues[3] = "0x0AD9"; ObjectID = "NaD-ja-1qu"; */
"NaD-ja-1qu.ibShadowedObjectValues[3]" = "0x0AD9";

/* Class = "NSComboBoxCell"; NaD-ja-1qu.ibShadowedObjectValues[4] = "0x1499"; ObjectID = "NaD-ja-1qu"; */
"NaD-ja-1qu.ibShadowedObjectValues[4]" = "0x1499";

/* Class = "NSComboBoxCell"; NaD-ja-1qu.ibShadowedObjectValues[5] = "0x056C"; ObjectID = "NaD-ja-1qu"; */
"NaD-ja-1qu.ibShadowedObjectValues[5]" = "0x056C";

/* Class = "NSComboBoxCell"; NaD-ja-1qu.ibShadowedObjectValues[6] = "0xFFFF"; ObjectID = "NaD-ja-1qu"; */
"NaD-ja-1qu.ibShadowedObjectValues[6]" = "0xFFFF";

/* Class = "NSTableView"; ibShadowedToolTip = "<key>AddProperties</key>\n<array>\n  <dict>\n    <key>Device</key>\n    <string>NVidia</string>\n    <key>Key</key>\n    <string>AAPL,HasPanel</string>\n    <key>Value</key>\n    <data>AQAAAA==</data>\n  </dict>\n  <dict>\n    <key>Device</key>\n    <string>NVidia</string>\n    <key>Key</key>\n    <string>AAPL,Haslid</string>\n    <key>Value</key>\n    <data>AQAAAA==</data>\n    </dict>\n</array>\nUsing device properties injection may be insufficient for some cases (new device, new standard, new OS), so this function lets you customize these injected properties.\n\nYou may write as many properties as you want for these devices: * ATI * NVidia * IntelGFX * LAN * WIFI * Firewire * SATA * IDE * HDA * HDMI * LPC * SmBUS * USB"; ObjectID = "Ob7-UX-r0p"; */
"Ob7-UX-r0p.ibShadowedToolTip" = "<key>AddProperties</key>\n<array>\n  <dict>\n    <key>Device</key>\n    <string>NVidia</string>\n    <key>Key</key>\n    <string>AAPL,HasPanel</string>\n    <key>Value</key>\n    <data>AQAAAA==</data>\n  </dict>\n  <dict>\n    <key>Device</key>\n    <string>NVidia</string>\n    <key>Key</key>\n    <string>AAPL,Haslid</string>\n    <key>Value</key>\n    <data>AQAAAA==</data>\n    </dict>\n</array>\nUsing device properties injection may be insufficient for some cases (new device, new standard, new OS), so this function lets you customize these injected properties.\n\nYou may write as many properties as you want for these devices: * ATI * NVidia * IntelGFX * LAN * WIFI * Firewire * SATA * IDE * HDA * HDMI * LPC * SmBUS * USB";

/* Class = "NSTextFieldCell"; title = "IntelMaxValue"; ObjectID = "P1p-BB-Jhs"; */
"P1p-BB-Jhs.title" = "IntelMaxValue";

/* Class = "NSTextField"; ibShadowedToolTip = "Replace Airport device name inside your DSDT"; ObjectID = "PQZ-Qh-lD1"; */
"PQZ-Qh-lD1.ibShadowedToolTip" = "Replace Airport device name inside your DSDT";

/* Class = "NSTextFieldCell"; title = "LAN"; ObjectID = "QOy-nA-OJ1"; */
"QOy-nA-OJ1.title" = "LAN";

/* Class = "NSTextFieldCell"; title = "Text Cell"; ObjectID = "Qec-jB-ZN6"; */
"Qec-jB-ZN6.title" = "Text Cell";

/* Class = "NSView"; ibShadowedToolTip = "First you should look your boot.log or preboot.log (obtained by press F2 in Clover GUI). There is a list of your PCI devices.\n\n4:432 0:000 PCI (00|02:05.00) : 10EC 8167 class=020000\n\nThis is LAN device\n\nVendorID= 10EC - this is Realtek\n\nDeviceID= 8167 - This is Realtek 8167/8169/8110 Gigabyte Ethernet Controller\n\nIt is located on the PCI bus (green digits)\n\nBus = 02\n\nDevice = 05 \n\nFunction = 00\n\nThis location will be unique for every device in your computer. You may have two equal graphics cards with the same IDs and same model. But their locations will be different.\n\nWe have to write into config.plist in section \"Devices\", array \"Arbitrary\" of items one per device you want to inject properties.\n\n\t<key>Devices</key>\n\t<dict>\n\t\t<key>Arbitrary</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>PciAddr</key>\n\t\t\t\t<string>02:05.00</string>\n\t\t\t\t<key>Comment</key>\n\t\t\t\t<string>Realtek LAN 8167</string>\n\t\t\t\t<key>CustomProperties</key>\n\t\t\t\t<array>\n\t\t\t\t\t<dict>\n\t\t\t\t\t\t<key>Key</key>\n\t\t\t\t\t\t<string>model</string>\n\t\t\t\t\t\t<key>Value</key>\n\t\t\t\t\t\t<string>Realtek 8169 Gigabit Ethernet Controller</string>\n\t\t\t\t\t</dict>\n\t\t\t\t\t<dict>\n\t\t\t\t\t\t<key>Key</key>\n\t\t\t\t\t\t<string>built-in</string>\n\t\t\t\t\t\t<key>Value</key>\n\t\t\t\t\t\t<data>AQAAAA==</data>\n\t\t\t\t\t</dict>\n\t\t\t\t</array>\n\t\t\t</dict>\n\t\t</array>"; ObjectID = "Qxp-DC-Voo"; */
"Qxp-DC-Voo.ibShadowedToolTip" = "First you should look your boot.log or preboot.log (obtained by press F2 in Clover GUI). There is a list of your PCI devices.\n\n4:432 0:000 PCI (00|02:05.00) : 10EC 8167 class=020000\n\nThis is LAN device\n\nVendorID= 10EC - this is Realtek\n\nDeviceID= 8167 - This is Realtek 8167/8169/8110 Gigabyte Ethernet Controller\n\nIt is located on the PCI bus (green digits)\n\nBus = 02\n\nDevice = 05 \n\nFunction = 00\n\nThis location will be unique for every device in your computer. You may have two equal graphics cards with the same IDs and same model. But their locations will be different.\n\nWe have to write into config.plist in section \"Devices\", array \"Arbitrary\" of items one per device you want to inject properties.\n\n\t<key>Devices</key>\n\t<dict>\n\t\t<key>Arbitrary</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>PciAddr</key>\n\t\t\t\t<string>02:05.00</string>\n\t\t\t\t<key>Comment</key>\n\t\t\t\t<string>Realtek LAN 8167</string>\n\t\t\t\t<key>CustomProperties</key>\n\t\t\t\t<array>\n\t\t\t\t\t<dict>\n\t\t\t\t\t\t<key>Key</key>\n\t\t\t\t\t\t<string>model</string>\n\t\t\t\t\t\t<key>Value</key>\n\t\t\t\t\t\t<string>Realtek 8169 Gigabit Ethernet Controller</string>\n\t\t\t\t\t</dict>\n\t\t\t\t\t<dict>\n\t\t\t\t\t\t<key>Key</key>\n\t\t\t\t\t\t<string>built-in</string>\n\t\t\t\t\t\t<key>Value</key>\n\t\t\t\t\t\t<data>AQAAAA==</data>\n\t\t\t\t\t</dict>\n\t\t\t\t</array>\n\t\t\t</dict>\n\t\t</array>";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[0] = "ATI"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[0]" = "ATI";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[1] = "NVidia"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[1]" = "NVidia";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[2] = "IntelGFX"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[2]" = "IntelGFX";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[3] = "LAN"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[3]" = "LAN";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[4] = "WIFI"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[4]" = "WIFI";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[5] = "Firewire"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[5]" = "Firewire";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[6] = "SATA"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[6]" = "SATA";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[7] = "IDE"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[7]" = "IDE";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[8] = "HDA"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[8]" = "HDA";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[9] = "HDMI"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[9]" = "HDMI";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[10] = "LPC"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[10]" = "LPC";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[11] = "SmBUS"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[11]" = "SmBUS";

/* Class = "NSComboBoxCell"; RPg-NS-WkE.ibShadowedObjectValues[12] = "USB"; ObjectID = "RPg-NS-WkE"; */
"RPg-NS-WkE.ibShadowedObjectValues[12]" = "USB";

/* Class = "NSTextFieldCell"; title = "Text Cell"; ObjectID = "RW2-NS-GZb"; */
"RW2-NS-GZb.title" = "Text Cell";

/* Class = "NSTableColumn"; headerCell.title = "Disabled"; ObjectID = "TGL-3O-5P1"; */
"TGL-3O-5P1.headerCell.title" = "Disabled";

/* Class = "NSTextFieldCell"; title = "XHCI"; ObjectID = "TPv-Br-7ix"; */
"TPv-Br-7ix.title" = "XHCI";

/* Class = "NSTextFieldCell"; title = "Text Cell"; ObjectID = "TgZ-ki-C6v"; */
"TgZ-ki-C6v.title" = "Text Cell";

/* Class = "NSTableColumn"; headerCell.title = "Value*"; ObjectID = "Txa-kI-pAD"; */
"Txa-kI-pAD.headerCell.title" = "Value*";

/* Class = "NSButtonCell"; title = "NoDefaultProperties"; ObjectID = "Txs-Zo-9Xd"; */
"Txs-Zo-9Xd.title" = "NoDefaultProperties";

/* Class = "NSTextField"; ibShadowedToolTip = "<key>Properties</key>\n<string>0207364862FA54HG345</string>\nTo create your own string you need the tool gfxutil that, for example, is bundled with DarwinDumper. You will need to create an xml file using a device path in standard notation as header and list properties, which will be injected. The example shows a file used to enable a video card:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>PciRoot(0x0)/Pci(0x2,0x0)</key>\n    <dict>\n        <key>AAPL,HasPanel</key>\n        <data>AQAAAA== </data>\n        <key>built-in</key>\n        <data>AA==</data>\n        <key>class-code</key>\n        <data>AAADAA==</data>\n        <key>device_type</key>\n        <data>ZGlzcGxheQA=</data>\n        <key>model</key>\n        <data>R01BIDk1MAA=</data>\n    </dict>\n</dict>\n</plist>\nIt is possible to obtain the currently used plist with DarwinDumper, to modify it and convert it into string form with the command:\n\n./gfxutil –i xml –o hex devprop.plist devprop.hex\n.. resulting in:\n\nd30000000100000001000000c70000000500000002010c00d041030a000000000101060000027fff0400100000006d006f00640065006c0000000c000000474d4120393530001c0000006400650076006900630065005f00740079007000650000000c000000646973706c617900200000004100410050004c002c00480061007300500061006e0065006c0000000800000001000000160000006200750069006c0074002d0069006e00000005000000001a00000063006c006100730073002d0063006f006400650000000800000000000300\nThe result needs to be used as a value for DeviceProperties. The same effect can be achieved by adding a _DMS method into the according section of your DSDT. It may be practical to use the string method when no DSDT is available yet."; ObjectID = "UDA-0b-dPf"; */
"UDA-0b-dPf.ibShadowedToolTip" = "<key>Properties</key>\n<string>0207364862FA54HG345</string>\nTo create your own string you need the tool gfxutil that, for example, is bundled with DarwinDumper. You will need to create an xml file using a device path in standard notation as header and list properties, which will be injected. The example shows a file used to enable a video card:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>PciRoot(0x0)/Pci(0x2,0x0)</key>\n    <dict>\n        <key>AAPL,HasPanel</key>\n        <data>AQAAAA== </data>\n        <key>built-in</key>\n        <data>AA==</data>\n        <key>class-code</key>\n        <data>AAADAA==</data>\n        <key>device_type</key>\n        <data>ZGlzcGxheQA=</data>\n        <key>model</key>\n        <data>R01BIDk1MAA=</data>\n    </dict>\n</dict>\n</plist>\nIt is possible to obtain the currently used plist with DarwinDumper, to modify it and convert it into string form with the command:\n\n./gfxutil –i xml –o hex devprop.plist devprop.hex\n.. resulting in:\n\nd30000000100000001000000c70000000500000002010c00d041030a000000000101060000027fff0400100000006d006f00640065006c0000000c000000474d4120393530001c0000006400650076006900630065005f00740079007000650000000c000000646973706c617900200000004100410050004c002c00480061007300500061006e0065006c0000000800000001000000160000006200750069006c0074002d0069006e00000005000000001a00000063006c006100730073002d0063006f006400650000000800000000000300\nThe result needs to be used as a value for DeviceProperties. The same effect can be achieved by adding a _DMS method into the according section of your DSDT. It may be practical to use the string method when no DSDT is available yet.";

/* Class = "NSButtonCell"; title = "FixOwnership"; ObjectID = "ULp-vx-Ug8"; */
"ULp-vx-Ug8.title" = "FixOwnership";

/* Class = "NSButtonCell"; title = "Inject"; ObjectID = "UeE-Gb-QK7"; */
"UeE-Gb-QK7.title" = "Inject";

/* Class = "NSTableColumn"; headerCell.title = "Device*"; ObjectID = "Vl8-Nf-teZ"; */
"Vl8-Nf-teZ.headerCell.title" = "Device*";

/* Class = "NSTextFieldCell"; title = "DisableFunctions"; ObjectID = "WVR-X1-3oF"; */
"WVR-X1-3oF.title" = "DisableFunctions";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "PciRoot(0x0)/Pci(0x1f,0x3)"; ObjectID = "Wom-0Y-x3O"; */
"Wom-0Y-x3O.ibShadowedIsNilPlaceholder" = "PciRoot(0x0)/Pci(0x1f,0x3)";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "1808 or 0x710"; ObjectID = "Xt7-nw-zTh"; */
"Xt7-nw-zTh.ibShadowedIsNilPlaceholder" = "1808 or 0x710";

/* Class = "NSTextField"; ibShadowedToolTip = "Set Hex value for disable a function.\n\n/* Function Disable 1 RCBA 0x3418 */\n#define PCH_DISABLE_ALWAYS\t(1 << 0)\n#define PCH_DISABLE_ADSPD\t(1 << 1)\n#define PCH_DISABLE_SATA1\t(1 << 2)\n#define PCH_DISABLE_SMBUS\t(1 << 3)\n#define PCH_DISABLE_HD_AUDIO\t(1 << 4)\n#define PCH_DISABLE_EHCI2\t(1 << 13)\n#define PCH_DISABLE_LPC\t\t(1 << 14)\n#define PCH_DISABLE_EHCI1\t(1 << 15)\n#define PCH_DISABLE_PCIE(x)\t(1 << (16 + x))\n#define PCH_DISABLE_THERMAL\t(1 << 24)\n#define PCH_DISABLE_SATA2\t(1 << 25)\n#define PCH_DISABLE_XHCI\t(1 << 27)\n\n0x1 (to disable ALWAYS)\n0x2 (to disable ADSPD)\n0x4 (to disable SATA1)\n0x8 (to disable SMBUS)\n0x10 (to disable HDEF)\n0x2000 (to disable EHCI2)\n0x4000 (to disable LPC)\n0x8000 (to disable EHCI1)\n0x1000000 (to disable THERMAL)\n0x2000000 (to disable SATA2)\n0x8000000 (to disable XHCI)"; ObjectID = "Zk2-oy-DHb"; */
"Zk2-oy-DHb.ibShadowedToolTip" = "Set Hex value for disable a function.\n\n/* Function Disable 1 RCBA 0x3418 */\n#define PCH_DISABLE_ALWAYS\t(1 << 0)\n#define PCH_DISABLE_ADSPD\t(1 << 1)\n#define PCH_DISABLE_SATA1\t(1 << 2)\n#define PCH_DISABLE_SMBUS\t(1 << 3)\n#define PCH_DISABLE_HD_AUDIO\t(1 << 4)\n#define PCH_DISABLE_EHCI2\t(1 << 13)\n#define PCH_DISABLE_LPC\t\t(1 << 14)\n#define PCH_DISABLE_EHCI1\t(1 << 15)\n#define PCH_DISABLE_PCIE(x)\t(1 << (16 + x))\n#define PCH_DISABLE_THERMAL\t(1 << 24)\n#define PCH_DISABLE_SATA2\t(1 << 25)\n#define PCH_DISABLE_XHCI\t(1 << 27)\n\n0x1 (to disable ALWAYS)\n0x2 (to disable ADSPD)\n0x4 (to disable SATA1)\n0x8 (to disable SMBUS)\n0x10 (to disable HDEF)\n0x2000 (to disable EHCI2)\n0x4000 (to disable LPC)\n0x8000 (to disable EHCI1)\n0x1000000 (to disable THERMAL)\n0x2000000 (to disable SATA2)\n0x8000000 (to disable XHCI)";

/* Class = "NSButtonCell"; title = "ForceHPET"; ObjectID = "a4f-La-NY3"; */
"a4f-La-NY3.title" = "ForceHPET";

/* Class = "NSComboBoxCell"; aBO-8H-kPO.ibShadowedObjectValues[0] = "DATA"; ObjectID = "aBO-8H-kPO"; */
"aBO-8H-kPO.ibShadowedObjectValues[0]" = "DATA";

/* Class = "NSComboBoxCell"; aBO-8H-kPO.ibShadowedObjectValues[1] = "STRING"; ObjectID = "aBO-8H-kPO"; */
"aBO-8H-kPO.ibShadowedObjectValues[1]" = "STRING";

/* Class = "NSComboBoxCell"; aBO-8H-kPO.ibShadowedObjectValues[2] = "NUMBER"; ObjectID = "aBO-8H-kPO"; */
"aBO-8H-kPO.ibShadowedObjectValues[2]" = "NUMBER";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "0xXXXX8086"; ObjectID = "amy-9Z-PoQ"; */
"amy-9Z-PoQ.ibShadowedIsNilPlaceholder" = "0xXXXX8086";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "0xXXXX8086"; ObjectID = "av3-rR-WHU"; */
"av3-rR-WHU.ibShadowedIsNilPlaceholder" = "0xXXXX8086";

/* Class = "NSTextFieldCell"; title = "AirportBridgeDeviceName"; ObjectID = "b5c-a9-ktv"; */
"b5c-a9-ktv.title" = "AirportBridgeDeviceName";

/* Class = "NSTextFieldCell"; title = "IMEI"; ObjectID = "bjr-FJ-q4H"; */
"bjr-FJ-q4H.title" = "IMEI";

/* Class = "NSButton"; ibShadowedToolTip = "Renaming of Device name EH. This helps to surpass port restrictions in El Capitan onward."; ObjectID = "bzm-UW-nA9"; */
"bzm-UW-nA9.ibShadowedToolTip" = "Renaming of Device name EH. This helps to surpass port restrictions in El Capitan onward.";

/* Class = "NSTextFieldCell"; title = "Text Cell"; ObjectID = "cmq-a8-msM"; */
"cmq-a8-msM.title" = "Text Cell";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "0xXXXX8086"; ObjectID = "d4G-ss-TXN"; */
"d4G-ss-TXN.ibShadowedIsNilPlaceholder" = "0xXXXX8086";

/* Class = "NSButton"; ibShadowedToolTip = "<key>AFGLowPowerState</key>\n<false/>\nThis helps remove cracking sounds at audio output after idle mode, so sound card is always on."; ObjectID = "dn8-Pw-elB"; */
"dn8-Pw-elB.ibShadowedToolTip" = "<key>AFGLowPowerState</key>\n<false/>\nThis helps remove cracking sounds at audio output after idle mode, so sound card is always on.";

/* Class = "NSButton"; ibShadowedToolTip = "Fix MaxBrightness for Intel"; ObjectID = "eMI-Yt-Luy"; */
"eMI-Yt-Luy.ibShadowedToolTip" = "Fix MaxBrightness for Intel";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "hda-gfx"; ObjectID = "efq-d0-Dvy"; */
"efq-d0-Dvy.ibShadowedIsNilPlaceholder" = "hda-gfx";

/* Class = "NSButton"; ibShadowedToolTip = "<key>AddClockID</key>\n<true/>\n<true/> - Enables a good, deep sleep, which cannot be exited by keyboard or mouse input.\n<false/> - The PC will possibly sleep and it can be woken up by keyboard or mouse; or it will be automatically woken up by some attached device\nInjects the property \"AAPL,clock-id\" with a unique identifier for each device. Set it to your liking.\n\nRequires USBInjection to be enabled.\n\nDefault value is set to disabled."; ObjectID = "f2J-nt-Amm"; */
"f2J-nt-Amm.ibShadowedToolTip" = "<key>AddClockID</key>\n<true/>\n<true/> - Enables a good, deep sleep, which cannot be exited by keyboard or mouse input.\n<false/> - The PC will possibly sleep and it can be woken up by keyboard or mouse; or it will be automatically woken up by some attached device\nInjects the property \"AAPL,clock-id\" with a unique identifier for each device. Set it to your liking.\n\nRequires USBInjection to be enabled.\n\nDefault value is set to disabled.";

/* Class = "NSButton"; ibShadowedToolTip = "A possibility to Set Intel Backlight"; ObjectID = "fBL-sm-PZ3"; */
"fBL-sm-PZ3.ibShadowedToolTip" = "A possibility to Set Intel Backlight";

/* Class = "NSTextFieldCell"; title = "SATA"; ObjectID = "fxj-bd-HA4"; */
"fxj-bd-HA4.title" = "SATA";

/* Class = "NSButtonCell"; title = "SetIntelBacklight"; ObjectID = "gB8-7Z-Bif"; */
"gB8-7Z-Bif.title" = "SetIntelBacklight";

/* Class = "NSButtonCell"; title = "ResetHDA"; ObjectID = "hYo-Wd-WFN"; */
"hYo-Wd-WFN.title" = "ResetHDA";

/* Class = "NSButtonCell"; title = "SetIntelMaxBacklight"; ObjectID = "ib6-Ng-Sgh"; */
"ib6-Ng-Sgh.title" = "SetIntelMaxBacklight";

/* Class = "NSTableColumn"; headerCell.title = "Key*"; ObjectID = "jWS-lq-rVF"; */
"jWS-lq-rVF.headerCell.title" = "Key*";

/* Class = "NSTableColumn"; headerCell.title = "Value*"; ObjectID = "jlN-zF-QfO"; */
"jlN-zF-QfO.headerCell.title" = "Value*";

/* Class = "NSButton"; ibShadowedToolTip = "If TRUE, hda-gfx=onboard-1 will be injected into the GFX0 and HDEF devices. Also, if an ATI or Nvidia HDMI device is present, they'll be assigned to onboard-2. If FALSE, then ATI or Nvidia devices will get onboard-1 as well as the HDAU device if present."; ObjectID = "jnb-OG-XlG"; */
"jnb-OG-XlG.ibShadowedToolTip" = "If TRUE, hda-gfx=onboard-1 will be injected into the GFX0 and HDEF devices. Also, if an ATI or Nvidia HDMI device is present, they'll be assigned to onboard-2. If FALSE, then ATI or Nvidia devices will get onboard-1 as well as the HDAU device if present.";

/* Class = "NSTableColumn"; headerCell.title = "Disabled"; ObjectID = "kQG-4c-nJZ"; */
"kQG-4c-nJZ.headerCell.title" = "Disabled";

/* Class = "NSButtonCell"; title = "AFGLowPowerState"; ObjectID = "lE2-SD-jA4"; */
"lE2-SD-jA4.title" = "AFGLowPowerState";

/* Class = "NSTextFieldCell"; title = "ATI"; ObjectID = "m8Z-5b-HHv"; */
"m8Z-5b-HHv.title" = "ATI";

/* Class = "NSComboBox"; ibShadowedToolTip = "Set Intel Max Backlight Value"; ObjectID = "m9s-s9-Kw6"; */
"m9s-s9-Kw6.ibShadowedToolTip" = "Set Intel Max Backlight Value";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "0xXXXX8086"; ObjectID = "mdE-cW-z7s"; */
"mdE-cW-z7s.ibShadowedIsNilPlaceholder" = "0xXXXX8086";

/* Class = "NSButtonCell"; title = "Add ClockID"; ObjectID = "nKB-UW-G26"; */
"nKB-UW-G26.title" = "Add ClockID";

/* Class = "NSTabViewItem"; label = "Arbitrary"; ObjectID = "pj1-PC-aNN"; */
"pj1-PC-aNN.label" = "Arbitrary";

/* Class = "NSTableColumn"; headerCell.title = "Value Type"; ObjectID = "pxi-J0-2Fb"; */
"pxi-J0-2Fb.headerCell.title" = "Value Type";

/* Class = "NSTableColumn"; headerCell.title = "Properties Key*"; ObjectID = "sUY-rc-CzA"; */
"sUY-rc-CzA.headerCell.title" = "Properties Key*";

/* Class = "NSButton"; ibShadowedToolTip = "Enable or disable LAN injection, enabled by default."; ObjectID = "sap-3V-U9E"; */
"sap-3V-U9E.ibShadowedToolTip" = "Enable or disable LAN injection, enabled by default.";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "0xXXXX8086"; ObjectID = "tVF-Tb-5jd"; */
"tVF-Tb-5jd.ibShadowedIsNilPlaceholder" = "0xXXXX8086";

/* Class = "NSTextFieldCell"; title = "IntelGFX"; ObjectID = "vDd-pS-Kg2"; */
"vDd-pS-Kg2.title" = "IntelGFX";

/* Class = "NSTextFieldCell"; title = "Text Cell"; ObjectID = "vF1-NB-Tga"; */
"vF1-NB-Tga.title" = "Text Cell";

/* Class = "NSTextFieldCell"; title = "Text Cell"; ObjectID = "vha-iy-O49"; */
"vha-iy-O49.title" = "Text Cell";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "0xXXXX1002"; ObjectID = "xjE-Wt-AST"; */
"xjE-Wt-AST.ibShadowedIsNilPlaceholder" = "0xXXXX1002";

/* Class = "NSBox"; title = "Add Properties"; ObjectID = "xkr-rE-wcR"; */
"xkr-rE-wcR.title" = "Add Properties";

/* Class = "NSTextFieldCell"; title = "Text Cell"; ObjectID = "yOf-aC-GdU"; */
"yOf-aC-GdU.title" = "Text Cell";

/* Class = "NSBox"; ibShadowedToolTip = "<key>FakeID</key>\n  <dict>\n    <key>ATI</key>\n    <string>0x68181002</string>\n    <key>IntelGFX</key>\n    <string>0x01268086</string>\n    <key>NVidia</key>\n    <string>0x0</string>\n    <key>LAN</key>\n    <string>0x436311ab</string>\n    <key>SATA</key>\n    <string>0x25628086</string>\n    <key>WIFI</key>\n    <string>0x431214E4</string>\n    <key>XHCI</key>\n    <string>0x0</string>\n    <key>IMEI</key>\n    <string>0x1E3A8086</string>\n  </dict>\nThis is a method to change PCI properties DeviceID and VendorID for the device will work with native drivers. In the example above: - AMDRadeonHD7850 has unsupported DeviceID=0x6819. Change to 0x6818 - Dell Wireless 1595, DeviceID=0x4315 is not supported. Change to 0x4312 - Marvell Yukon 8056, DeviceID=0x4353. Change to 0x4363.\nThere are other known substitutions for unsupported devices.\n\nThis substitution will work if InjectATI (Nvidia, Intel) is set. Or if FixDsdtMask set for the device.\n\nLikewise, the IMEI fix will only work if the DSDT Patch AddMCHC_0008 is enabled."; ObjectID = "yvB-P5-wy5"; */
"yvB-P5-wy5.ibShadowedToolTip" = "<key>FakeID</key>\n  <dict>\n    <key>ATI</key>\n    <string>0x68181002</string>\n    <key>IntelGFX</key>\n    <string>0x01268086</string>\n    <key>NVidia</key>\n    <string>0x0</string>\n    <key>LAN</key>\n    <string>0x436311ab</string>\n    <key>SATA</key>\n    <string>0x25628086</string>\n    <key>WIFI</key>\n    <string>0x431214E4</string>\n    <key>XHCI</key>\n    <string>0x0</string>\n    <key>IMEI</key>\n    <string>0x1E3A8086</string>\n  </dict>\nThis is a method to change PCI properties DeviceID and VendorID for the device will work with native drivers. In the example above: - AMDRadeonHD7850 has unsupported DeviceID=0x6819. Change to 0x6818 - Dell Wireless 1595, DeviceID=0x4315 is not supported. Change to 0x4312 - Marvell Yukon 8056, DeviceID=0x4353. Change to 0x4363.\nThere are other known substitutions for unsupported devices.\n\nThis substitution will work if InjectATI (Nvidia, Intel) is set. Or if FixDsdtMask set for the device.\n\nLikewise, the IMEI fix will only work if the DSDT Patch AddMCHC_0008 is enabled.";

/* Class = "NSBox"; title = "Fake ID"; ObjectID = "yvB-P5-wy5"; */
"yvB-P5-wy5.title" = "Fake ID";

/* Class = "NSTableColumn"; headerCell.title = "Properties Value"; ObjectID = "zDl-Sr-4Fb"; */
"zDl-Sr-4Fb.headerCell.title" = "Properties Value";

/* Class = "NSTextFieldCell"; title = "WIFI"; ObjectID = "zEn-Md-gTE"; */
"zEn-Md-gTE.title" = "WIFI";

/* Class = "NSButtonCell"; title = "HDMIInjection"; ObjectID = "zQM-Rc-Ud8"; */
"zQM-Rc-Ud8.title" = "HDMIInjection";

/* Class = "NSTextFieldCell"; title = "CustomProperties"; ObjectID = "zlX-sr-gGp"; */
"zlX-sr-gGp.title" = "CustomProperties";

/* Class = "NSComboBoxCell"; zpk-Vh-PQx.ibShadowedObjectValues[0] = "STRING"; ObjectID = "zpk-Vh-PQx"; */
"zpk-Vh-PQx.ibShadowedObjectValues[0]" = "STRING";

/* Class = "NSComboBoxCell"; zpk-Vh-PQx.ibShadowedObjectValues[1] = "NUMBER"; ObjectID = "zpk-Vh-PQx"; */
"zpk-Vh-PQx.ibShadowedObjectValues[1]" = "NUMBER";

/* Class = "NSComboBoxCell"; zpk-Vh-PQx.ibShadowedObjectValues[2] = "DATA"; ObjectID = "zpk-Vh-PQx"; */
"zpk-Vh-PQx.ibShadowedObjectValues[2]" = "DATA";
