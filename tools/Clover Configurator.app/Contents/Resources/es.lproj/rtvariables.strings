
/* Class = "NSTextField"; ibShadowedToolTip = "<key>MLB</key>\n<string>XXXXXXXXXX</string>\nDigits and letters, 13-17 in length, describing the motherboard's serial number. No special rule exists here. The best option is to choose a real serial number and to replace digits in the middle."; ObjectID = "3Rz-bH-ov6"; */
"3Rz-bH-ov6.ibShadowedToolTip" = "<key>MLB</key>\n<string>XXXXXXXXXX</string>\nDigits and letters, 13-17 in length, describing the motherboard's serial number. No special rule exists here. The best option is to choose a real serial number and to replace digits in the middle.";

/* Class = "NSButtonCell"; title = "from SMBIOS"; ObjectID = "GuE-NO-NRB"; */
"GuE-NO-NRB.title" = "from SMBIOS";

/* Class = "NSButtonCell"; title = "from System"; ObjectID = "Kps-63-923"; */
"Kps-63-923.title" = "from System";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "13 o 17 digits length"; ObjectID = "KwA-l4-d8A"; */
"KwA-l4-d8A.ibShadowedIsNilPlaceholder" = "13 o 17 digits length";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "0x"; ObjectID = "L3V-1N-kVZ"; */
"L3V-1N-kVZ.ibShadowedIsNilPlaceholder" = "0x";

/* Class = "NSTextField"; ibShadowedToolTip = "For BooterConfig there are flags\n\n/* Bitfields for boot_args->flags */\n#define kBootArgsFlagRebootOnPanic    (1 << 0) -> HEX value: 0x1\n#define kBootArgsFlagHiDPI            (1 << 1) -> HEX value: 0x2\n#define kBootArgsFlagBlack            (1 << 2) -> HEX value: 0x4\n#define kBootArgsFlagCSRActiveConfig\t(1 << 3) -> HEX value: 0x8\n#define kBootArgsFlagCSRPendingConfig\t(1 << 4) -> HEX value: 0x10\n#define kBootArgsFlagCSRBoot          (1 << 5) -> HEX value: 0x20\n#define kBootArgsFlagBlackBg          (1 << 6) -> HEX value: 0x40\n#define kBootArgsFlagLoginUI          (1 << 7) -> HEX value: 0x80\n\nThis flags is analyzed by boot.efi not by kernel and present in boot_args that read by kernel."; ObjectID = "Nfh-uz-Sx6"; */
"Nfh-uz-Sx6.ibShadowedToolTip" = "For BooterConfig there are flags\n\n/* Bitfields for boot_args->flags */\n#define kBootArgsFlagRebootOnPanic    (1 << 0) -> HEX value: 0x1\n#define kBootArgsFlagHiDPI            (1 << 1) -> HEX value: 0x2\n#define kBootArgsFlagBlack            (1 << 2) -> HEX value: 0x4\n#define kBootArgsFlagCSRActiveConfig\t(1 << 3) -> HEX value: 0x8\n#define kBootArgsFlagCSRPendingConfig\t(1 << 4) -> HEX value: 0x10\n#define kBootArgsFlagCSRBoot          (1 << 5) -> HEX value: 0x20\n#define kBootArgsFlagBlackBg          (1 << 6) -> HEX value: 0x40\n#define kBootArgsFlagLoginUI          (1 << 7) -> HEX value: 0x80\n\nThis flags is analyzed by boot.efi not by kernel and present in boot_args that read by kernel.";

/* Class = "NSBox"; title = "Info"; ObjectID = "PhT-pr-ARX"; */
"PhT-pr-ARX.title" = "Info";

/* Class = "NSTextFieldCell"; title = "CsrActiveConfig"; ObjectID = "RKP-GB-mer"; */
"RKP-GB-mer.title" = "CsrActiveConfig";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "0x"; ObjectID = "SSb-Ci-yus"; */
"SSb-Ci-yus.ibShadowedIsNilPlaceholder" = "0x";

/* Class = "NSTextField"; ibShadowedToolTip = "<key>CsrActiveConfig</key>\n<string>0x3</string>\nControls System Integrity Protection (SIP), see Wikipedia.\n\nRelevant user options for SIP:\n\ncsr-active-config 0x0 = SIP Enabled (Default)\ncsr-active-config 0x3 = SIP Partially Disabled (Loads unsigned kexts)\ncsr-active-config 0x67 = SIP Disabled completely"; ObjectID = "Uqa-nR-qg4"; */
"Uqa-nR-qg4.ibShadowedToolTip" = "<key>CsrActiveConfig</key>\n<string>0x3</string>\nControls System Integrity Protection (SIP), see Wikipedia.\n\nRelevant user options for SIP:\n\ncsr-active-config 0x0 = SIP Enabled (Default)\ncsr-active-config 0x3 = SIP Partially Disabled (Loads unsigned kexts)\ncsr-active-config 0x67 = SIP Disabled completely";

/* Class = "NSTextFieldCell"; title = "ROM"; ObjectID = "Wb4-wf-DjH"; */
"Wb4-wf-DjH.title" = "ROM";

/* Class = "NSComboBoxCell"; Z1e-OV-wLC.ibShadowedObjectValues[0] = "UseMacAddr0"; ObjectID = "Z1e-OV-wLC"; */
"Z1e-OV-wLC.ibShadowedObjectValues[0]" = "UseMacAddr0";

/* Class = "NSComboBoxCell"; Z1e-OV-wLC.ibShadowedObjectValues[1] = "UseMacAddr1"; ObjectID = "Z1e-OV-wLC"; */
"Z1e-OV-wLC.ibShadowedObjectValues[1]" = "UseMacAddr1";

/* Class = "NSTextFieldCell"; title = "MLB"; ObjectID = "aah-0d-TtG"; */
"aah-0d-TtG.title" = "MLB";

/* Class = "NSSegmentedCell"; bTi-aD-UHm.ibShadowedLabels[0] = "Mac"; ObjectID = "bTi-aD-UHm"; */
"bTi-aD-UHm.ibShadowedLabels[0]" = "Mac";

/* Class = "NSSegmentedCell"; bTi-aD-UHm.ibShadowedLabels[1] = "Hack"; ObjectID = "bTi-aD-UHm"; */
"bTi-aD-UHm.ibShadowedLabels[1]" = "Hack";

/* Class = "NSButtonCell"; title = "Generate"; ObjectID = "cP0-fk-re9"; */
"cP0-fk-re9.title" = "Generate";

/* Class = "NSTextFieldCell"; title = "BooterConfig"; ObjectID = "elH-so-LWT"; */
"elH-so-LWT.title" = "BooterConfig";

/* Class = "NSBox"; title = "Box"; ObjectID = "g2c-NL-kj6"; */
"g2c-NL-kj6.title" = "Box";

/* Class = "NSComboBox"; ibShadowedToolTip = "<key>ROM</key>\n<data>AAAAAAAA</data> OR <string>UseMacAddrX</string>\nTwelve hexadecimal digits, often corresponding to the MAC address of the ethernet card. According to several reports this value can be random.\n\nSince revision 3051 Clover can detect the LAN MAC address of an ethernet device and use it as ROM.\nFor UEFI, it will first check the UEFI protocol for LAN information, but for legacy it will attempt to get it from the hardware instead, and because this procedure is dangerous you'll need to enable the functionality by specifying the LAN device with: UseMacAddr0 or UseMacAddr1 (up to 4 devices are calculated but only 2 will be used).\nIf UseMacAddrX is not set then the MAC address will not be tested for legacy; the UEFI method is safe and will always be tested."; ObjectID = "kEV-Mm-MDm"; */
"kEV-Mm-MDm.ibShadowedToolTip" = "<key>ROM</key>\n<data>AAAAAAAA</data> OR <string>UseMacAddrX</string>\nTwelve hexadecimal digits, often corresponding to the MAC address of the ethernet card. According to several reports this value can be random.\n\nSince revision 3051 Clover can detect the LAN MAC address of an ethernet device and use it as ROM.\nFor UEFI, it will first check the UEFI protocol for LAN information, but for legacy it will attempt to get it from the hardware instead, and because this procedure is dangerous you'll need to enable the functionality by specifying the LAN device with: UseMacAddr0 or UseMacAddr1 (up to 4 devices are calculated but only 2 will be used).\nIf UseMacAddrX is not set then the MAC address will not be tested for legacy; the UEFI method is safe and will always be tested.";

/* Class = "CocoaBindingsConnection"; ibShadowedIsNilPlaceholder = "valid ROM or MAC address"; ObjectID = "lZC-mm-lJY"; */
"lZC-mm-lJY.ibShadowedIsNilPlaceholder" = "valid ROM or MAC address";
